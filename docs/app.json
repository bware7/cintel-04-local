[{"name": "app.py", "content": "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, ui, render\nfrom shinywidgets import render_plotly\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom shiny import reactive\n\npenguins = load_penguins()\n\nui.page_opts(title=\"Penguin Data Exploration - Bin Ware\", fillable=True)\n\n@reactive.calc\ndef filtered_data():\n    selected_species = input.selected_species_list()\n    if selected_species:\n        filtered_df = penguins[penguins[\"species\"].isin(selected_species)]\n\n        if filtered_df.empty:\n            return None \n        return filtered_df.dropna()  \n    return penguins.dropna()  \n\n\nwith ui.sidebar(position=\"right\", bg=\"#f8f8f8\", open=\"open\"):\n    ui.h2(\"Sidebar\")\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select column to visualize\",\n        choices=[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n        selected=\"bill_length_mm\"\n    )\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 10, min=1, max=30)\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 5, 50, 15, step=5)\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Select Species\",\n        choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\"],\n        inline=True\n    )\n    ui.hr()\n    ui.h5(\"GitHub Code Repository\")\n    ui.a(\"View on GitHub\", href=\"https://github.com/bware7/cintel-03-reactive\", target=\"_blank\")\n\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram\")\n        @render_plotly\n        def plotly_histogram():\n            data = filtered_data()\n            if data is not None:\n                return px.histogram(\n                    data, \n                    x=input.selected_attribute(),\n                    nbins=input.plotly_bin_count(),\n                    color=\"species\"\n                )\n            else:\n                return \"No data available for the selected filters\"\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Table\")\n        @render.data_frame\n        def data_table():\n            data = filtered_data()\n            if data is not None:\n                return data\n            else:\n                return \"No data available for the selected filters\"\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Grid\")\n        @render.data_frame\n        def data_grid():\n            data = filtered_data()\n            if data is not None:\n                return data\n            else:\n                return \"No data available for the selected filters\"\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Scatterplot: Body Mass vs. Bill Depth\")\n        @render_plotly\n        def plotly_scatterplot():\n            data = filtered_data()\n            if data is not None:\n                return px.scatter(\n                    data_frame=data,\n                    x=\"body_mass_g\",\n                    y=\"bill_depth_mm\",\n                    color=\"species\",\n                    labels={\"bill_depth_mm\": \"Bill Depth (mm)\", \"body_mass_g\": \"Body Mass (g)\"}\n                )\n            else:\n                return \"No data available for the selected filters\"\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram: Body Mass\")\n        @render.plot\n        def seaborn_histogram():\n            data = filtered_data()\n            if data is not None:\n                fig, ax = plt.subplots()\n                sns.histplot(\n                    data=data, \n                    x=\"body_mass_g\", \n                    hue=\"species\", \n                    bins=input.seaborn_bin_count(), \n                    ax=ax\n                )\n                ax.set_xlabel(\"Mass (g)\")\n                ax.set_ylabel(\"Count\")\n                ax.set_title(\"Body Mass Distribution (Seaborn)\")\n                return fig\n            else:\n                return plt.figure() \n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Summary Statistics\")\n        @render.data_frame\n        def summary_table():\n            data = filtered_data()\n            if data is not None:\n                summary = data.describe()\n                return summary.reset_index()\n            else:\n                return \"No data available for the selected filters\"\n", "type": "text"}]